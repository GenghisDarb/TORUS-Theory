name: CI Full          # <- single name

on:
  push:
  pull_request:

# VS Code YAML hint suppression
jobs:
  validate-structure:  # <- one job block
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify CI skeleton
        run: echo "CI skeleton OK"

      # ─── DOCX presence (warning-only) ──────────────────────────
      - name: Validate chapters folder
        run: |
          if [ ! -d "docs/book/chapters/" ]; then
            echo "Warning: docs/book/chapters/ folder is missing."
          elif ! find docs/book/chapters/ -type f -name "*.docx" | grep -q .; then
            echo "Warning: No DOCX files found in docs/book/chapters/."
          fi

      # ─── supplements & experiments must exist ─────────────────
      - name: Validate supplements and experiments folders
        run: |
          for folder in docs/supplements docs/experiments; do
            if [ ! -d "$folder" ]; then
              echo "$folder does not exist!"; exit 1
            fi
          done

      # ─── duplicate-filename guard (skip .keep) ────────────────
      - name: Check for duplicate filenames (excluding .keep)
        run: |
          dups=$(find docs/ -type f \
                 | sed 's!.*/!!' \
                 | grep -v '^\.keep$' \
                 | sort | uniq -d)
          if [ -n "$dups" ]; then
            echo "Duplicate filenames detected:"
            echo "$dups"
            exit 1
          else
            echo "No duplicate filenames (except .keep) found."
          fi

      # ─── Generate T-HET spectrum for notebook ───────────────
      - name: Generate T-HET spectrum file
        run: |
          python3 scripts/cmb_analysis_T-HET_vs_LCDM_adjusted_II.py

      # ─── CMB notebook smoke test ─────────────────────────────
      - name: Execute CMB notebook
        run: |
          pip install nbconvert nbclient
          jupyter nbconvert --to notebook --execute notebooks/cmb_torus_vs_thet.ipynb \
            --ExecutePreprocessor.timeout=1800 --output /tmp/out.ipynb

      - name: Install nbstripout
        run: pip3 install nbstripout==0.8.1

  test-suite:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install papermill pytest

    - name: Editable install
      run: pip install -e .

    - name: Set Jupyter kernel
      run: |
        python -m ipykernel install --user --name torus-ci --display-name "Python (TORUS CI)"

    - name: Execute validation notebooks via papermill
      run: |
        pip install papermill
        papermill notebooks/validation/entropy/entropy_drift_analysis.ipynb out_entropy.ipynb -k torus-ci

    - name: Skip heavy notebooks
      run: |
        for nb in $(find notebooks -name '*.ipynb' ! -path '*PhaseA*' ); do
          jupyter nbconvert --to notebook --execute "$nb" --ExecutePreprocessor.timeout=120 --ExecutePreprocessor.kernel_name=torus-ci
        done

    - name: Lint step
      run: |
        black --check .
        ruff .

  lattice-regeneration:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install PyKat (optional)
      if: env.PYKAT_ENABLED == 'true'  # noqa: editor-hint
      run: |
        pip install pykat

    - name: Run lattice regeneration script
      run: |
        python scripts/regenerate_torus_solutions.py
      continue-on-error: true

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']   # ← pin
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-ci.txt
      - name: Register CI kernel
        run: python -m ipykernel install --user --name torus-ci --display-name "Python (TORUS CI)"
      - name: Run notebook tests
        run: |
          for nb in $(python tools/list_notebooks.py); do
            jupyter nbconvert --to notebook --execute "$nb" \
              --ExecutePreprocessor.kernel_name=torus-ci \
              --ExecutePreprocessor.timeout=180
          done

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install black ruff
      - name: Run linting
        run: |
          black --check .
          ruff .

  run-notebooks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install jupyter
      - name: Execute notebooks
        run: |
          for notebook in $(find notebooks -name '*.ipynb'); do
            jupyter nbconvert --execute --to notebook --inplace "$notebook" --ExecutePreprocessor.timeout=600;
          done

  check-readmes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check README presence
        run: |
          for folder in $(find . -type d -maxdepth 1); do
            if [ ! -f "$folder/README.md" ]; then
              echo "Missing README in $folder" && exit 1;
            fi
          done

  full-dependency-install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # ----- Install full stack -----
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-ci.txt

      # ----- Register kernel once -----
      - name: Register Jupyter kernel
        run: python -m ipykernel install --user --name torus-ci --display-name "Python (TORUS CI)"

      # ----- Notebook execution (skip heavy PhaseA) -----
      - name: Execute validation notebooks
        run: |
          find notebooks/validation -name '*.ipynb' -print0 | while IFS= read -r -d '' nb; do
            jupyter nbconvert --execute --to notebook "$nb" \
              --ExecutePreprocessor.kernel_name=torus-ci \
              --ExecutePreprocessor.timeout=180;
          done

      # ----- Run lightweight scripts -----
      - name: Run CMB script
        run: python scripts/cmb_analysis_T-HET_vs_LCDM_adjusted_II.py
        env: { PYTHONPATH: "${{ github.workspace }}"}   # ensure local modules

      # ----- Lint & format -----
      - name: Lint
        run: |
          black --check .
          ruff .

      # ----- README guard (skip hidden & allowlist) -----
      - name: Check READMEs
        run: python tests/README_guard.py

env:
  PYKAT_ENABLED: false
